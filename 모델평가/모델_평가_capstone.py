# -*- coding: utf-8 -*-
"""모델 평가_capstone.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19mz2BPYuLk27Y7SkMgGsStPXIBSV3TeL

# 강릉시 TOP3
"""

import pandas as pd

# ✅ 1. 평가 결과 & 정답 레이블 로딩
df_eval = pd.read_csv("평가결과_강릉시_지역필터2.csv")
df_keywords = pd.read_csv("강릉_정답레이블.csv")

# ✅ 2. 고유명사(TF-IDF) 정제
df_keywords["포함된_고유명사(TF-IDF)"] = df_keywords["포함된_고유명사(TF-IDF)"].apply(eval)
df_keywords["고유명사_리스트"] = df_keywords["포함된_고유명사(TF-IDF)"].apply(
    lambda d: [kw for kw, _ in sorted(d.items(), key=lambda x: x[1], reverse=True)]
)

# ✅ 3. 장애인 편의시설 정제 (\n → 쉼표 → 리스트)
df_keywords["장애인편의시설"] = df_keywords["장애인편의시설"].apply(
    lambda x: [item.strip() for item in str(x).replace("\n", ",").split(",") if item.strip()]
)

# ✅ 4. 정답 레이블 맵 구성
숙소_고유명사맵 = dict(zip(df_keywords["숙소명"], df_keywords["고유명사_리스트"]))
숙소_편의시설맵 = dict(zip(df_keywords["숙소명"], df_keywords["장애인편의시설"]))

# ✅ 5. 포함핵심어 파싱
df_eval["포함핵심어"] = df_eval["포함핵심어"].apply(lambda x: [kw.strip() for kw in str(x).split(",")])
df_eval["핵심어 개수"] = df_eval["포함핵심어"].apply(len)

# ✅ 6. 평가 함수 (핵심어별로 구분하여 매칭)
def match_keywords(keywords, 숙소):
    if 숙소 not in 숙소_고유명사맵:
        return 0
    고유명사들 = 숙소_고유명사맵[숙소]
    편의시설들 = 숙소_편의시설맵.get(숙소, [])
    고유_hit = sum(1 for kw in keywords if kw in 고유명사들)
    편의_hit = sum(1 for kw in keywords if kw in 편의시설들)
    return 고유_hit + 편의_hit

# ✅ 7. 평가 실행
hit_bools = []
hit_counts = []

for _, row in df_eval.iterrows():
    keywords = row["포함핵심어"]
    숙소들 = [row["추천_숙소1"], row["추천_숙소2"], row["추천_숙소3"]]
    total_hit = 0
    for 숙소 in 숙소들:
        total_hit = match_keywords(keywords, 숙소)
        if total_hit >= len(keywords):  # 완전 일치 시 Hit
            break
    hit_bools.append(1 if total_hit >= len(keywords) else 0)
    hit_counts.append(total_hit)

df_eval["정답여부(Hit)"] = hit_bools
df_eval["일치개수"] = hit_counts

# ✅ 8. 지표 계산
accuracy = df_eval["정답여부(Hit)"].mean()
precision = df_eval["일치개수"].apply(lambda x: x / 3).mean()

# ✅ 9. 출력
print("✅ 평가 결과:")
print(f"- 정확도(Accuracy) = {round(accuracy, 3)}")
print(f"- 정밀도(Precision@3) = {round(precision, 3)}")
print(f"- 전체 질의 수 = {len(df_eval)}")

"""# 속초시 TOP3"""

import pandas as pd

# ✅ 1. 평가 결과 & 정답 레이블 로딩
df_eval = pd.read_csv("평가결과_속초시_지역필터2.csv")
df_keywords = pd.read_csv("속초_정답레이블.csv")

# ✅ 2. 고유명사(TF-IDF) 정제
df_keywords["포함된_고유명사(TF-IDF)"] = df_keywords["포함된_고유명사(TF-IDF)"].apply(eval)
df_keywords["고유명사_리스트"] = df_keywords["포함된_고유명사(TF-IDF)"].apply(
    lambda d: [kw for kw, _ in sorted(d.items(), key=lambda x: x[1], reverse=True)]
)

# ✅ 3. 장애인 편의시설 정제 (\n → 쉼표 → 리스트)
df_keywords["장애인편의시설"] = df_keywords["장애인편의시설"].apply(
    lambda x: [item.strip() for item in str(x).replace("\n", ",").split(",") if item.strip()]
)

# ✅ 4. 정답 레이블 맵 구성
숙소_고유명사맵 = dict(zip(df_keywords["숙소명"], df_keywords["고유명사_리스트"]))
숙소_편의시설맵 = dict(zip(df_keywords["숙소명"], df_keywords["장애인편의시설"]))

# ✅ 5. 포함핵심어 파싱
df_eval["포함핵심어"] = df_eval["포함핵심어"].apply(lambda x: [kw.strip() for kw in str(x).split(",")])
df_eval["핵심어 개수"] = df_eval["포함핵심어"].apply(len)

# ✅ 6. 평가 함수 (핵심어별로 구분하여 매칭)
def match_keywords(keywords, 숙소):
    if 숙소 not in 숙소_고유명사맵:
        return 0
    고유명사들 = 숙소_고유명사맵[숙소]
    편의시설들 = 숙소_편의시설맵.get(숙소, [])
    고유_hit = sum(1 for kw in keywords if kw in 고유명사들)
    편의_hit = sum(1 for kw in keywords if kw in 편의시설들)
    return 고유_hit + 편의_hit

# ✅ 7. 평가 실행
hit_bools = []
hit_counts = []

for _, row in df_eval.iterrows():
    keywords = row["포함핵심어"]
    숙소들 = [row["추천_숙소1"], row["추천_숙소2"], row["추천_숙소3"]]
    total_hit = 0
    for 숙소 in 숙소들:
        total_hit = match_keywords(keywords, 숙소)
        if total_hit >= len(keywords):  # 완전 일치 시 Hit
            break
    hit_bools.append(1 if total_hit >= len(keywords) else 0)
    hit_counts.append(total_hit)

df_eval["정답여부(Hit)"] = hit_bools
df_eval["일치개수"] = hit_counts

# ✅ 8. 지표 계산
accuracy = df_eval["정답여부(Hit)"].mean()
precision = df_eval["일치개수"].apply(lambda x: x / 3).mean()

# ✅ 9. 출력
print("✅ 평가 결과:")
print(f"- 정확도(Accuracy) = {round(accuracy, 3)}")
print(f"- 정밀도(Precision@3) = {round(precision, 3)}")
print(f"- 전체 질의 수 = {len(df_eval)}")

"""# 춘천시 TOP3"""

import pandas as pd

# ✅ 1. 평가 결과 & 정답 레이블 로딩
df_eval = pd.read_csv("평가결과_춘천시_지역필터2.csv")
df_keywords = pd.read_csv("춘천_정답레이블.csv")

# ✅ 2. 고유명사(TF-IDF) 정제
df_keywords["포함된_고유명사(TF-IDF)"] = df_keywords["포함된_고유명사(TF-IDF)"].apply(eval)
df_keywords["고유명사_리스트"] = df_keywords["포함된_고유명사(TF-IDF)"].apply(
    lambda d: [kw for kw, _ in sorted(d.items(), key=lambda x: x[1], reverse=True)]
)

# ✅ 3. 장애인 편의시설 정제 (\n → 쉼표 → 리스트)
df_keywords["장애인편의시설"] = df_keywords["장애인편의시설"].apply(
    lambda x: [item.strip() for item in str(x).replace("\n", ",").split(",") if item.strip()]
)

# ✅ 4. 정답 레이블 맵 구성
숙소_고유명사맵 = dict(zip(df_keywords["숙소명"], df_keywords["고유명사_리스트"]))
숙소_편의시설맵 = dict(zip(df_keywords["숙소명"], df_keywords["장애인편의시설"]))

# ✅ 5. 포함핵심어 파싱
df_eval["포함핵심어"] = df_eval["포함핵심어"].apply(lambda x: [kw.strip() for kw in str(x).split(",")])
df_eval["핵심어 개수"] = df_eval["포함핵심어"].apply(len)

# ✅ 6. 평가 함수 (핵심어별로 구분하여 매칭)
def match_keywords(keywords, 숙소):
    if 숙소 not in 숙소_고유명사맵:
        return 0
    고유명사들 = 숙소_고유명사맵[숙소]
    편의시설들 = 숙소_편의시설맵.get(숙소, [])
    고유_hit = sum(1 for kw in keywords if kw in 고유명사들)
    편의_hit = sum(1 for kw in keywords if kw in 편의시설들)
    return 고유_hit + 편의_hit

# ✅ 7. 평가 실행
hit_bools = []
hit_counts = []

for _, row in df_eval.iterrows():
    keywords = row["포함핵심어"]
    숙소들 = [row["추천_숙소1"], row["추천_숙소2"], row["추천_숙소3"]]
    total_hit = 0
    for 숙소 in 숙소들:
        total_hit = match_keywords(keywords, 숙소)
        if total_hit >= len(keywords):  # 완전 일치 시 Hit
            break
    hit_bools.append(1 if total_hit >= len(keywords) else 0)
    hit_counts.append(total_hit)

df_eval["정답여부(Hit)"] = hit_bools
df_eval["일치개수"] = hit_counts

# ✅ 8. 지표 계산
accuracy = df_eval["정답여부(Hit)"].mean()
precision = df_eval["일치개수"].apply(lambda x: x / 3).mean()

# ✅ 9. 출력
print("✅ 평가 결과:")
print(f"- 정확도(Accuracy) = {round(accuracy, 3)}")
print(f"- 정밀도(Precision@3) = {round(precision, 3)}")
print(f"- 전체 질의 수 = {len(df_eval)}")

# ✅ 숙소별 정확한 매칭 결과 보기용 리스트
details = []

for _, row in df_eval.iterrows():
    keywords = row["포함핵심어"]
    숙소들 = [row["추천_숙소1"], row["추천_숙소2"], row["추천_숙소3"]]

    row_matches = []
    for 숙소 in 숙소들:
        고유명사들 = 숙소_고유명사맵.get(숙소, [])
        편의시설들 = 숙소_편의시설맵.get(숙소, [])

        matched_keywords = [kw for kw in keywords if kw in 고유명사들 or kw in 편의시설들]
        is_hit = len(matched_keywords) == len(keywords)

        row_matches.append({
            "질의": row["질의"],
            "추천숙소": 숙소,
            "정답여부(Hit)": "✅" if is_hit else "❌",
            "일치한 키워드": ", ".join(matched_keywords),
            "전체핵심어": ", ".join(keywords)
        })

    details.extend(row_matches)

# ✅ 데이터프레임 생성
df_detail = pd.DataFrame(details)
df_detail.tail(40)  # 처음 10행만 출력