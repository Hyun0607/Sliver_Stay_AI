# -*- coding: utf-8 -*-
"""평가 질의 만들기_capstone_ver2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QrdyrkKmKVVYxXDbNy-ybnBxbi6378g0
"""

!pip install openai
!pip install openai==0.28
import pandas as pd
import random
import openai
import os

# ✅ 2. OpenAI API 키
os.environ["OPENAI_API_KEY"] = "sk-...."  # 본인의 키로 교체
openai.api_key = os.getenv("OPENAI_API_KEY")

import pandas as pd

# ✅ 1. CSV 파일 로딩
df = pd.read_csv("춘천시_핵심어(장애인포함).csv", encoding="utf-8")

# ✅ 2. 고유명사(TF-IDF) 컬럼 문자열 → 딕셔너리로 변환
df["포함된_고유명사(TF-IDF)"] = df["포함된_고유명사(TF-IDF)"].apply(eval)

# ✅ 3. 장애인 편의시설 처리
def parse_facility(x):
    if str(x).strip() == "X":
        return []
    # 줄바꿈 → 쉼표로 대체 후 리스트로 변환
    cleaned = str(x).replace("\n", ",")
    return [item.strip() for item in cleaned.split(",") if item.strip()]
df["장애인편의시설"] = df["장애인편의시설"].apply(parse_facility)

df.head(20)

# ✅ 3. GPT 기반 질의 생성 함수
def generate_question(places, facilities):
    joined_places = ", ".join(places)
    joined_facilities = ", ".join(facilities)

    prompt = f"""
당신은 고령자 및 장애인을 위한 맞춤 숙소 추천 시스템의 평가 질문 생성 전문가입니다.

아래 조건들을 참고하여 실제 사용자가 할 법한 **자연스럽고 현실적인 질문 문장 1개**를 생성하세요.

[조건]
- 고유명사는 숙소 위치 또는 주변 지명입니다.
- 장애인 편의시설은 숙소 내부 편의 요소입니다.
- 고유명사와 편의시설을 자연스럽게 녹여 문장으로 작성해주세요.
- 고유명사만 있을 경우, 장소 중심의 질문을 만들고
- 편의시설만 있을 경우, 편의 조건 중심의 질문을 만드세요.

[입력 예시]
- 고유명사: 강촌역
- 편의시설: 엘리베이터 있음

→ 질문: 강촌역 근처에 엘리베이터 있는 숙소 있나요?

[입력]
- 고유명사: {joined_places if places else '없음'}
- 편의시설: {joined_facilities if facilities else '없음'}

→ 질문:"""

    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
        max_tokens=150
    )
    return response["choices"][0]["message"]["content"].strip()

import random

def auto_generate_questions(df, count=100):
    results = []
    used_combinations = set()
    progress = 0

    while progress < count:
        row = df.sample(1).iloc[0]
        tfidf_dict = row["포함된_고유명사(TF-IDF)"]
        # TF-IDF 점수 기준 내림차순 정렬
        places = [kw for kw, _ in sorted(tfidf_dict.items(), key=lambda x: x[1], reverse=True)]
        facilities = row["장애인편의시설"]

        if not places and not facilities:
            continue

        k = random.choice([1, 2, 3])
        sel_places, sel_facilities = [], []

        if not facilities:
            if len(places) < k:
                continue
            sel_places = places[:k]
        elif not places:
            if len(facilities) < k:
                continue
            sel_facilities = random.sample(facilities, k)
        else:
            if k == 1 and len(facilities) >= 1:
                sel_facilities = random.sample(facilities, 1)
            elif k == 2 and len(places) >= 1 and len(facilities) >= 1:
                sel_places = places[:1]
                sel_facilities = random.sample(facilities, 1)
            elif k == 3:
                if len(places) >= 2 and len(facilities) >= 1 and random.random() < 0.5:
                    sel_places = places[:2]
                    sel_facilities = random.sample(facilities, 1)
                elif len(places) >= 1 and len(facilities) >= 2:
                    sel_places = places[:1]
                    sel_facilities = random.sample(facilities, 2)
                else:
                    continue
            else:
                continue

        key_tuple = tuple(sorted(sel_places + sel_facilities))
        if key_tuple in used_combinations:
            continue
        used_combinations.add(key_tuple)

        try:
            question = generate_question(sel_places, sel_facilities)
            results.append({
                "질의": question,
                "포함핵심어": ", ".join(sel_places + sel_facilities),
                "포함개수": k
            })
            progress += 1
            print(f"✅ 생성 중: {progress}/{count}")
        except Exception as e:
            print("❌ 오류:", e)
            continue

    return pd.DataFrame(results)

# ✅ 평가 질의 100개 생성
df_result = auto_generate_questions(df, count=100)

# ✅ CSV 파일로 저장
df_result.to_csv("춘천시_평가질의_최종100개.csv", index=False, encoding="utf-8-sig")

print("✅ 저장 완료: 춘천시_평가질의_최종100개.csv")