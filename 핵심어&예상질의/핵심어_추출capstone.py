# -*- coding: utf-8 -*-
"""핵심어 추출Capstone.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-dc31-F0lMQ-KGd9TbnKK3T1D-hHxUvm
"""

# ✅ 1. 필수 설치 (Colab용)
!pip install konlpy

# ✅ 2. 라이브러리 임포트
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from konlpy.tag import Okt
import re

# ✅ 3. 데이터 로딩
df_noun = pd.read_csv("숙소_고유명사 리스트.csv")
df_overview = pd.read_csv("숙소_설명문.csv")
df_noun["고유명사"] = df_noun["고유명사"].apply(eval)  # 리스트로 변환
df = pd.merge(df_noun, df_overview, on="숙소명", how="left")

# ✅ NaN 설명문 제거
df["숙소설명"] = df["숙소설명"].fillna("")

df

# 불용어 리스트
korean_stopwords = {
    "은", "는", "이", "가", "을", "를", "에", "에서", "에게", "한테", "으로", "로", "과", "와", "랑", "도", "만",
    "또한", "그리고", "그러나", "즉", "예를", "들면", "따라서", "때문에",
    "자신", "것", "수", "중", "더", "정도", "같은", "이런", "그런", "저런",
    "좀", "요", "아주", "너무", "많이", "잘", "꼭", "혹시", "정말", "진짜", "다소", "대체로", "각각", "대부분",
    "숙소", "호텔", "객실", "이용", "예약", "시설", "서비스", "위치", "전망", "가격", "가성비",
    "가능", "가장", "가족", "같은", "곳에", "없는", "없이", "있는", "좋은", "차로", "마다", "만큼", "부터", "부터는", "밖에",
    "보다", "처럼", "조차", "까지", "부터도", "대로", "라도", "이며", "인데", "이자"
}

# ✅ 4. 명사 추출 함수 (불용어 제거)
okt = Okt()
def extract_nouns(text):
    return [w for w in okt.nouns(text) if w not in korean_stopwords and len(w) > 1]

# ✅ 숙소명에서 명사 추출 (숙소명 단어 제거용)
def tokenize_hotel_name(hotel_name):
    clean = re.sub(r"[^가-힣]", " ", hotel_name)
    return [w for w in okt.nouns(clean) if len(w) > 1]

# ✅ 5. TF-IDF 분석용 명사 문서 생성
noun_docs = [' '.join(extract_nouns(text)) for text in df["숙소설명"]]
vectorizer = TfidfVectorizer(tokenizer=lambda x: x.split())
tfidf_matrix = vectorizer.fit_transform(noun_docs)
feature_names = vectorizer.get_feature_names_out()

## 여기가 가장 최근에 한거 25.05.22
# ✅ 3. 고유명사 집합 구성
set_proper = set()
for kw_list in df["고유명사"]:
    set_proper.update(kw_list)

# ✅ 4. 고유명사만 추출한 TF-IDF + 점수 저장
included_keywords = []
included_keywords_with_score = []

for i, row in df_tfidf.iterrows():
    matched = row[row > 0]
    matched_dict = {k: round(float(v), 3) for k, v in matched.items() if k in set_proper}
    included_keywords_with_score.append(matched_dict)
    included_keywords.append(list(matched_dict.keys()))

df["포함된_고유명사"] = included_keywords
df["포함된_고유명사(TF-IDF)"] = included_keywords_with_score

# ✅ 5. CSV로 저장
df.to_csv("고유명사_TFIDF_포함숙소_ver2.csv", index=False, encoding="utf-8-sig")
print("✅ 저장 완료: 고유명사_TFIDF_포함숙소_ver2.csv")

# TF-IDF 딕셔너리 정렬 (내림차순)
df["포함된_고유명사(TF-IDF)"] = df["포함된_고유명사(TF-IDF)"].apply(
    lambda d: dict(sorted(d.items(), key=lambda item: item[1], reverse=True))
)

# 새 파일로 저장
df.to_csv("고유명사_TFIDF_포함숙소_ver2_sorted.csv", index=False, encoding="utf-8-sig")
print("✅ 저장 완료: 고유명사_TFIDF_포함숙소_ver2_sorted.csv")

###### 위 파일에는 장애인 편의시설 칼럼이 없기 때문에 컬럼 추가 후 평가 질의로 넘어갈 것
